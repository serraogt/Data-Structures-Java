import java.util.Objects;

public class MyInteger
{
    public int value;

    public MyInteger(int value) {
        this.value = value;
    }

    public int get() {
        return value;
    }

    public void set(int value) {
        this.value = value;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        MyInteger myInteger = (MyInteger) o;
        return get() == myInteger.get();
    }

    @Override
    public int hashCode() {
        return Objects.hash(get());
    }
}



public class MyHashtable
{
    public int capacity;
    public int elementSize;
    int hashTable[];
    // TODO: Create a hash table (a list, a list of a linkedlist, an array, etc.)
    // public List<Integer> table;


    public MyHashtable(int capacity) {
        this.capacity = capacity;
        this.elementSize = 0;
        hashTable= new int[capacity];
    }

    public int getCapacity() {
        return capacity;
    }

    public void setCapacity(int capacity) {
        this.capacity = capacity;
    }

    public int getElementSize() {
        return elementSize;
    }

    public void setElementSize(int elementSize) {
        this.elementSize = elementSize;
    }

    // Adding new value
    public void insert(int x)
    {
        if (capacity ==0){
            System.out.println("you cannot insert");
        }
        else{
        int hashedKey= x % capacity;
                //hashTable.length();
        hashTable[hashedKey]=x;
        elementSize++;}

        // TODO: Implement inserting new value to your hash table
        // If the elementSize exceeds the lambda (load factor) value at any point, you need to rehash your table:

        if (0.75 < elementSize/capacity ){
            rehash();
            //0.75 is referring lambda to increase. it might be 1 too but 0.75 is recommended to me before to maintain clarity.
        }
        // rehash();
    }

    // Searching a value in hash table
    public boolean contains(int x)
    {
        // TODO: Implement the searching a particular value by using hash codes
        return false; // Return TRUE if you find the value in hash table
    }

    // Printing all values
    public void printTable()
    {
        // TODO: Implement displaying your hash table
    }

    // Hash function
    private int hashFunction(int x)
    {
        // TODO: Implement this according to your hash method (separate chaining, linear probing, etc.)
        return 0; // Return hashed version of your value
    }

    private static boolean isPrime(int x){
        //to add smallest prime
        if (x==2 || x==3){return true;}
        else if(x==1 || x%2 ==0){return false;}
        for (int i; i*i<=x;i ++) if x%i==0;{return false}
        //time is up
    }

    // Rehashing the hashtable
    private void rehash()
    {
        //double the size
        capacity= capacity*2 ;
        // TODO: Implement rehashing when it is needed (load factor value is important!)
    }
}



import java.lang.reflect.Field;
import java.util.Hashtable;
import java.util.Random;

public class Main {

    public static void main(String[] args) {

        // Created 1000 random integers for your hash table implementation
        Integer[] randomArr = generateRandomNumbers(1000, 1000, 5000);

        // TODO: This is the usage of your implementation for hashing
        MyHashtable myHashtable = new MyHashtable(11);

        /**
         * CALCULATE TIME: !START!
         **/
        long startTime = System.nanoTime();
        for (int i : randomArr) {
            myHashtable.insert(i);
        }
        long endTime = System.nanoTime();
        long elapsedTime = endTime-startTime;
        /**
         * CALCULATE TIME: !END!
         **/

        myHashtable.printTable();

        ///////////////////////// SECOND PART ///////////////////////////

		/* TODO: MyInteger class uses hashing implementation of Java
			it is used for hashing algorithm on Hashtable class of Java
		 */
        // Created 1000 random MyInteger class type integers for your usage in Java Hashtable implementation
        MyInteger[] randomArrJava = generateRandomMyNumbers(1000, 5000, 9000);

        Hashtable<Integer, Integer> javaHashtable = new Hashtable<>(11);

        /**
         * CALCULATE TIME: !START!
         **/
        long startTime2 = System.nanoTime();

        for (MyInteger i : randomArrJava) {
            javaHashtable.put(i.hashCode(), i.get());
        }
        long endTime2 = System.nanoTime();

        long elapsedTime2 = endTime2 - startTime2;
        /**
         * CALCULATE TIME: !END!
         **/
            if(elapsedTime == elapsedTime2 )
                System.out.println("they are equal. there is not any difference");

            else if (elapsedTime> elapsedTime2)
                System.out.println("implementation written by hand has bigger time complexity");

            else
                System.out.println("implementation written by hand has less time complexity");
    }

    // Returns the current capacity of the hash table
    private static int hashTableCapacity(Hashtable<Integer, Integer> table) {
        //throws NoSuchFieldException, IllegalAccessException {

        Field tableField = null;

        try {
            tableField = Hashtable.class.getDeclaredField("table");
        } catch (NoSuchFieldException e) {
            e.printStackTrace();
        }
        tableField.setAccessible(true);

        Object[] tempTable = new Object[0];

        try {
            tempTable = (Object[]) tableField.get(table);
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        }

        return (tempTable == null ? 0 : tempTable.length);
    }

    // Generate random numbers between low and high
    private static Integer[] generateRandomNumbers(int size, int lowBound, int highBound)
    {
        Random rd = new Random();
        Integer[] tempRandom = new Integer[size];

        for (int i = 0; i < tempRandom.length; i++)
        {
            tempRandom[i] = rd.nextInt(highBound - lowBound) + lowBound;
        }

        return tempRandom;
    }

    // Generate random numbers from MyInteger class between low and high
    private static MyInteger[] generateRandomMyNumbers(int size, int lowBound, int highBound)
    {
        Random rd = new Random();
        MyInteger[] tempRandom = new MyInteger[size];

        for (int i = 0; i < tempRandom.length; i++)
        {
            int randomInt = rd.nextInt(highBound - lowBound) + lowBound;
            tempRandom[i] = new MyInteger(randomInt);
        }

        return tempRandom;
    }


    /**
     * QUESTION 4: Discuss the time complexities
     *
     */
}
